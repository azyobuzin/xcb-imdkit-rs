/* automatically generated by rust-bindgen */

#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
use xcb::ffi::base::*;
use xcb::ffi::xproto::*;
#[link(name = "xcb-imdkit")] extern "C" { }

pub const XCB_IM_HEADER_SIZE: u32 = 4;
pub const XCB_XIM_CM_DATA_SIZE: u32 = 20;
pub const XCB_XIM_PROTOCOLMAJORVERSION: u32 = 0;
pub const XCB_XIM_PROTOCOLMINORVERSION: u32 = 0;
pub const XCB_XIM_CONNECT: u32 = 1;
pub const XCB_XIM_CONNECT_REPLY: u32 = 2;
pub const XCB_XIM_DISCONNECT: u32 = 3;
pub const XCB_XIM_DISCONNECT_REPLY: u32 = 4;
pub const XCB_XIM_AUTH_REQUIRED: u32 = 10;
pub const XCB_XIM_AUTH_REPLY: u32 = 11;
pub const XCB_XIM_AUTH_NEXT: u32 = 12;
pub const XCB_XIM_AUTH_SETUP: u32 = 13;
pub const XCB_XIM_AUTH_NG: u32 = 14;
pub const XCB_XIM_ERROR: u32 = 20;
pub const XCB_XIM_OPEN: u32 = 30;
pub const XCB_XIM_OPEN_REPLY: u32 = 31;
pub const XCB_XIM_CLOSE: u32 = 32;
pub const XCB_XIM_CLOSE_REPLY: u32 = 33;
pub const XCB_XIM_REGISTER_TRIGGERKEYS: u32 = 34;
pub const XCB_XIM_TRIGGER_NOTIFY: u32 = 35;
pub const XCB_XIM_TRIGGER_NOTIFY_REPLY: u32 = 36;
pub const XCB_XIM_SET_EVENT_MASK: u32 = 37;
pub const XCB_XIM_ENCODING_NEGOTIATION: u32 = 38;
pub const XCB_XIM_ENCODING_NEGOTIATION_REPLY: u32 = 39;
pub const XCB_XIM_QUERY_EXTENSION: u32 = 40;
pub const XCB_XIM_QUERY_EXTENSION_REPLY: u32 = 41;
pub const XCB_XIM_SET_IM_VALUES: u32 = 42;
pub const XCB_XIM_SET_IM_VALUES_REPLY: u32 = 43;
pub const XCB_XIM_GET_IM_VALUES: u32 = 44;
pub const XCB_XIM_GET_IM_VALUES_REPLY: u32 = 45;
pub const XCB_XIM_CREATE_IC: u32 = 50;
pub const XCB_XIM_CREATE_IC_REPLY: u32 = 51;
pub const XCB_XIM_DESTROY_IC: u32 = 52;
pub const XCB_XIM_DESTROY_IC_REPLY: u32 = 53;
pub const XCB_XIM_SET_IC_VALUES: u32 = 54;
pub const XCB_XIM_SET_IC_VALUES_REPLY: u32 = 55;
pub const XCB_XIM_GET_IC_VALUES: u32 = 56;
pub const XCB_XIM_GET_IC_VALUES_REPLY: u32 = 57;
pub const XCB_XIM_SET_IC_FOCUS: u32 = 58;
pub const XCB_XIM_UNSET_IC_FOCUS: u32 = 59;
pub const XCB_XIM_FORWARD_EVENT: u32 = 60;
pub const XCB_XIM_SYNC: u32 = 61;
pub const XCB_XIM_SYNC_REPLY: u32 = 62;
pub const XCB_XIM_COMMIT: u32 = 63;
pub const XCB_XIM_RESET_IC: u32 = 64;
pub const XCB_XIM_RESET_IC_REPLY: u32 = 65;
pub const XCB_XIM_GEOMETRY: u32 = 70;
pub const XCB_XIM_STR_CONVERSION: u32 = 71;
pub const XCB_XIM_STR_CONVERSION_REPLY: u32 = 72;
pub const XCB_XIM_PREEDIT_START: u32 = 73;
pub const XCB_XIM_PREEDIT_START_REPLY: u32 = 74;
pub const XCB_XIM_PREEDIT_DRAW: u32 = 75;
pub const XCB_XIM_PREEDIT_CARET: u32 = 76;
pub const XCB_XIM_PREEDIT_CARET_REPLY: u32 = 77;
pub const XCB_XIM_PREEDIT_DONE: u32 = 78;
pub const XCB_XIM_STATUS_START: u32 = 79;
pub const XCB_XIM_STATUS_DRAW: u32 = 80;
pub const XCB_XIM_STATUS_DONE: u32 = 81;
pub const XCB_XIM_EXTENSION: u32 = 128;
pub const XCB_XIM_EXT_SET_EVENT_MASK: u32 = 48;
pub const XCB_XIM_EXT_FORWARD_KEYEVENT: u32 = 50;
pub const XCB_XIM_EXT_MOVE: u32 = 51;
pub const XCB_XIM_XNQueryInputStyle: &'static [u8; 16usize] = b"queryInputStyle\0";
pub const XCB_XIM_XNClientWindow: &'static [u8; 13usize] = b"clientWindow\0";
pub const XCB_XIM_XNInputStyle: &'static [u8; 11usize] = b"inputStyle\0";
pub const XCB_XIM_XNFocusWindow: &'static [u8; 12usize] = b"focusWindow\0";
pub const XCB_XIM_XNFilterEvents: &'static [u8; 13usize] = b"filterEvents\0";
pub const XCB_XIM_XNPreeditAttributes: &'static [u8; 18usize] = b"preeditAttributes\0";
pub const XCB_XIM_XNStatusAttributes: &'static [u8; 17usize] = b"statusAttributes\0";
pub const XCB_XIM_XNArea: &'static [u8; 5usize] = b"area\0";
pub const XCB_XIM_XNAreaNeeded: &'static [u8; 11usize] = b"areaNeeded\0";
pub const XCB_XIM_XNSpotLocation: &'static [u8; 13usize] = b"spotLocation\0";
pub const XCB_XIM_XNColormap: &'static [u8; 9usize] = b"colorMap\0";
pub const XCB_XIM_XNStdColormap: &'static [u8; 12usize] = b"stdColorMap\0";
pub const XCB_XIM_XNForeground: &'static [u8; 11usize] = b"foreground\0";
pub const XCB_XIM_XNBackground: &'static [u8; 11usize] = b"background\0";
pub const XCB_XIM_XNBackgroundPixmap: &'static [u8; 17usize] = b"backgroundPixmap\0";
pub const XCB_XIM_XNFontSet: &'static [u8; 8usize] = b"fontSet\0";
pub const XCB_XIM_XNLineSpace: &'static [u8; 10usize] = b"lineSpace\0";
pub const XCB_XIM_XNSeparatorofNestedList: &'static [u8; 22usize] = b"separatorofNestedList\0";
pub const XCB_IM_ALL_LOCALES : & 'static [ u8 ; 514usize ] = b"aa,af,am,an,ar,as,ast,az,be,bem,ber,bg,bho,bn,bo,br,brx,bs,byn,C,ca,crh,cs,csb,cv,cy,da,de,dv,dz,el,en,es,et,eu,fa,ff,fi,fil,fo,fr,fur,fy,ga,gd,gez,gl,gu,gv,ha,he,hi,hne,hr,hsb,ht,hu,hy,id,ig,ik,is,it,iu,iw,ja,ka,kk,kl,km,kn,ko,kok,ks,ku,kw,ky,lb,lg,li,lij,lo,lt,lv,mag,mai,mg,mhr,mi,mk,ml,mn,mr,ms,mt,my,nan,nb,nds,ne,nl,nn,no,nr,nso,oc,om,or,os,pa,pap,pl,ps,pt,ro,ru,rw,sa,sc,sd,se,shs,si,sid,sk,sl,so,sq,sr,ss,st,sv,sw,ta,te,tg,th,ti,tig,tk,tl,tn,tr,ts,tt,ug,uk,unm,ur,uz,ve,vi,wa,wae,wal,wo,xh,yi,yo,yue,zh,zu\0" ;
pub type xcb_im_bytearray_t = *mut u8;
#[repr(C)]
pub struct _xcb_im_ximattr_fr_t {
    pub attribute_ID: u16,
    pub type_of_the_value: u16,
    pub length_of_im_attribute: u16,
    pub im_attribute: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_ximattr_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ximattr_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_ximattr_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ximattr_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_ximattr_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximattr_fr_t>())).attribute_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximattr_fr_t),
            "::",
            stringify!(attribute_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximattr_fr_t>())).type_of_the_value as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximattr_fr_t),
            "::",
            stringify!(type_of_the_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximattr_fr_t>())).length_of_im_attribute as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximattr_fr_t),
            "::",
            stringify!(length_of_im_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximattr_fr_t>())).im_attribute as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximattr_fr_t),
            "::",
            stringify!(im_attribute)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ximattr_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_ximattr_fr_t {{ im_attribute: {:?} }}",
            self.im_attribute
        )
    }
}
pub type xcb_im_ximattr_fr_t = _xcb_im_ximattr_fr_t;
#[repr(C)]
pub struct _xcb_im_xicattr_fr_t {
    pub attribute_ID: u16,
    pub type_of_the_value: u16,
    pub length_of_ic_attribute: u16,
    pub ic_attribute: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_xicattr_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_xicattr_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_xicattr_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_xicattr_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_xicattr_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_xicattr_fr_t>())).attribute_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xicattr_fr_t),
            "::",
            stringify!(attribute_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_xicattr_fr_t>())).type_of_the_value as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xicattr_fr_t),
            "::",
            stringify!(type_of_the_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_xicattr_fr_t>())).length_of_ic_attribute as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xicattr_fr_t),
            "::",
            stringify!(length_of_ic_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_xicattr_fr_t>())).ic_attribute as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xicattr_fr_t),
            "::",
            stringify!(ic_attribute)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_xicattr_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_xicattr_fr_t {{ ic_attribute: {:?} }}",
            self.ic_attribute
        )
    }
}
pub type xcb_im_xicattr_fr_t = _xcb_im_xicattr_fr_t;
#[repr(C)]
pub struct _xcb_im_ximattribute_fr_t {
    pub attribute_ID: u16,
    pub value_length: u16,
    pub value: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_ximattribute_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ximattribute_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_ximattribute_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ximattribute_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_ximattribute_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximattribute_fr_t>())).attribute_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximattribute_fr_t),
            "::",
            stringify!(attribute_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximattribute_fr_t>())).value_length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximattribute_fr_t),
            "::",
            stringify!(value_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_ximattribute_fr_t>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximattribute_fr_t),
            "::",
            stringify!(value)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ximattribute_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_ximattribute_fr_t {{ value: {:?} }}", self.value)
    }
}
pub type xcb_im_ximattribute_fr_t = _xcb_im_ximattribute_fr_t;
#[repr(C)]
pub struct _xcb_im_xicattribute_fr_t {
    pub attribute_ID: u16,
    pub value_length: u16,
    pub value: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_xicattribute_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_xicattribute_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_xicattribute_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_xicattribute_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_xicattribute_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_xicattribute_fr_t>())).attribute_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xicattribute_fr_t),
            "::",
            stringify!(attribute_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_xicattribute_fr_t>())).value_length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xicattribute_fr_t),
            "::",
            stringify!(value_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xicattribute_fr_t>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xicattribute_fr_t),
            "::",
            stringify!(value)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_xicattribute_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_xicattribute_fr_t {{ value: {:?} }}", self.value)
    }
}
pub type xcb_im_xicattribute_fr_t = _xcb_im_xicattribute_fr_t;
#[repr(C)]
pub struct _xcb_im_ximtriggerkey_fr_t {
    pub keysym: u32,
    pub modifier: u32,
    pub modifier_mask: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_ximtriggerkey_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ximtriggerkey_fr_t>(),
        12usize,
        concat!("Size of: ", stringify!(_xcb_im_ximtriggerkey_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ximtriggerkey_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_ximtriggerkey_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximtriggerkey_fr_t>())).keysym as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximtriggerkey_fr_t),
            "::",
            stringify!(keysym)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximtriggerkey_fr_t>())).modifier as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximtriggerkey_fr_t),
            "::",
            stringify!(modifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ximtriggerkey_fr_t>())).modifier_mask as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ximtriggerkey_fr_t),
            "::",
            stringify!(modifier_mask)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ximtriggerkey_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_ximtriggerkey_fr_t {{  }}")
    }
}
pub type xcb_im_ximtriggerkey_fr_t = _xcb_im_ximtriggerkey_fr_t;
#[repr(C)]
pub struct _xcb_im_encodinginfo_fr_t {
    pub length_of_encoding_info: u16,
    pub encoding_info: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_encodinginfo_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_encodinginfo_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_encodinginfo_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_encodinginfo_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_encodinginfo_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encodinginfo_fr_t>())).length_of_encoding_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encodinginfo_fr_t),
            "::",
            stringify!(length_of_encoding_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encodinginfo_fr_t>())).encoding_info as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encodinginfo_fr_t),
            "::",
            stringify!(encoding_info)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_encodinginfo_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_encodinginfo_fr_t {{ encoding_info: {:?} }}",
            self.encoding_info
        )
    }
}
pub type xcb_im_encodinginfo_fr_t = _xcb_im_encodinginfo_fr_t;
#[repr(C)]
pub struct _xcb_im_str_fr_t {
    pub length_of_string: u8,
    pub string: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_str_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_str_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_str_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_str_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_str_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_fr_t>())).length_of_string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_fr_t),
            "::",
            stringify!(length_of_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_str_fr_t>())).string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_fr_t),
            "::",
            stringify!(string)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_str_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_str_fr_t {{ string: {:?} }}", self.string)
    }
}
pub type xcb_im_str_fr_t = _xcb_im_str_fr_t;
#[repr(C)]
pub struct _xcb_im_xpcs_fr_t {
    pub length_of_string_in_bytes: u16,
    pub string: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_xpcs_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_xpcs_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_xpcs_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_xpcs_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_xpcs_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_xpcs_fr_t>())).length_of_string_in_bytes as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xpcs_fr_t),
            "::",
            stringify!(length_of_string_in_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xpcs_fr_t>())).string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xpcs_fr_t),
            "::",
            stringify!(string)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_xpcs_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_xpcs_fr_t {{ string: {:?} }}", self.string)
    }
}
pub type xcb_im_xpcs_fr_t = _xcb_im_xpcs_fr_t;
#[repr(C)]
pub struct _xcb_im_ext_fr_t {
    pub extension_major_opcode: u16,
    pub extension_minor_opcode: u16,
    pub length_of_extension_name: u16,
    pub extension_name: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_ext_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ext_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_ext_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ext_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_ext_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_fr_t>())).extension_major_opcode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_fr_t),
            "::",
            stringify!(extension_major_opcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_fr_t>())).extension_minor_opcode as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_fr_t),
            "::",
            stringify!(extension_minor_opcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_fr_t>())).length_of_extension_name as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_fr_t),
            "::",
            stringify!(length_of_extension_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_ext_fr_t>())).extension_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_fr_t),
            "::",
            stringify!(extension_name)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ext_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_ext_fr_t {{ extension_name: {:?} }}",
            self.extension_name
        )
    }
}
pub type xcb_im_ext_fr_t = _xcb_im_ext_fr_t;
#[repr(C)]
pub struct _xcb_im_inputstyle_fr_t {
    pub inputstyle: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_inputstyle_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_inputstyle_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_inputstyle_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_inputstyle_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_inputstyle_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_inputstyle_fr_t>())).inputstyle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_inputstyle_fr_t),
            "::",
            stringify!(inputstyle)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_inputstyle_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_inputstyle_fr_t {{  }}")
    }
}
pub type xcb_im_inputstyle_fr_t = _xcb_im_inputstyle_fr_t;
#[repr(C)]
pub struct _xcb_im_attr_head_fr_t {
    pub attribute_id: u16,
    pub attribute_length: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_attr_head_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_attr_head_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_attr_head_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_attr_head_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_attr_head_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_attr_head_fr_t>())).attribute_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_attr_head_fr_t),
            "::",
            stringify!(attribute_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_attr_head_fr_t>())).attribute_length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_attr_head_fr_t),
            "::",
            stringify!(attribute_length)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_attr_head_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_attr_head_fr_t {{  }}")
    }
}
pub type xcb_im_attr_head_fr_t = _xcb_im_attr_head_fr_t;
#[repr(C)]
pub struct _xcb_im_short_fr_t {
    pub value: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_short_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_short_fr_t>(),
        2usize,
        concat!("Size of: ", stringify!(_xcb_im_short_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_short_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_short_fr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_short_fr_t>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_short_fr_t),
            "::",
            stringify!(value)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_short_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_short_fr_t {{  }}")
    }
}
pub type xcb_im_short_fr_t = _xcb_im_short_fr_t;
#[repr(C)]
pub struct _xcb_im_long_fr_t {
    pub value: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_long_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_long_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_long_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_long_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_long_fr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_long_fr_t>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_long_fr_t),
            "::",
            stringify!(value)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_long_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_long_fr_t {{  }}")
    }
}
pub type xcb_im_long_fr_t = _xcb_im_long_fr_t;
#[repr(C)]
pub struct _xcb_im_xrectangle_fr_t {
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_xrectangle_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_xrectangle_fr_t>(),
        8usize,
        concat!("Size of: ", stringify!(_xcb_im_xrectangle_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_xrectangle_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_xrectangle_fr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xrectangle_fr_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xrectangle_fr_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xrectangle_fr_t>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xrectangle_fr_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xrectangle_fr_t>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xrectangle_fr_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xrectangle_fr_t>())).height as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xrectangle_fr_t),
            "::",
            stringify!(height)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_xrectangle_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_xrectangle_fr_t {{  }}")
    }
}
pub type xcb_im_xrectangle_fr_t = _xcb_im_xrectangle_fr_t;
#[repr(C)]
pub struct _xcb_im_xpoint_fr_t {
    pub x: u16,
    pub y: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_xpoint_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_xpoint_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_xpoint_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_xpoint_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_xpoint_fr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xpoint_fr_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xpoint_fr_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_xpoint_fr_t>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_xpoint_fr_t),
            "::",
            stringify!(y)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_xpoint_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_xpoint_fr_t {{  }}")
    }
}
pub type xcb_im_xpoint_fr_t = _xcb_im_xpoint_fr_t;
#[repr(C)]
pub struct _xcb_im_fontset_fr_t {
    pub length_of_base_font_name: u16,
    pub base_font_name_list: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_fontset_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_fontset_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_fontset_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_fontset_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_fontset_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_fontset_fr_t>())).length_of_base_font_name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_fontset_fr_t),
            "::",
            stringify!(length_of_base_font_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_fontset_fr_t>())).base_font_name_list as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_fontset_fr_t),
            "::",
            stringify!(base_font_name_list)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_fontset_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_fontset_fr_t {{ base_font_name_list: {:?} }}",
            self.base_font_name_list
        )
    }
}
pub type xcb_im_fontset_fr_t = _xcb_im_fontset_fr_t;
#[repr(C)]
pub struct _xcb_im_input_styles_fr_t {
    pub XIMStyle_list: _xcb_im_input_styles_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_input_styles_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_inputstyle_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_input_styles_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_input_styles_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_input_styles_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_input_styles_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_input_styles_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_input_styles_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_input_styles_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_input_styles_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_input_styles_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_input_styles_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_input_styles_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_input_styles_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_input_styles_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_input_styles_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_input_styles_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_input_styles_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_input_styles_fr_t>())).XIMStyle_list as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_input_styles_fr_t),
            "::",
            stringify!(XIMStyle_list)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_input_styles_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_input_styles_fr_t {{ XIMStyle_list: {:?} }}",
            self.XIMStyle_list
        )
    }
}
pub type xcb_im_input_styles_fr_t = _xcb_im_input_styles_fr_t;
#[repr(C)]
pub struct _xcb_im_packet_header_fr_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_packet_header_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_packet_header_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_packet_header_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_packet_header_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_packet_header_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_packet_header_fr_t>())).major_opcode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_packet_header_fr_t),
            "::",
            stringify!(major_opcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_packet_header_fr_t>())).minor_opcode as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_packet_header_fr_t),
            "::",
            stringify!(minor_opcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_packet_header_fr_t>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_packet_header_fr_t),
            "::",
            stringify!(length)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_packet_header_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_packet_header_fr_t {{  }}")
    }
}
pub type xcb_im_packet_header_fr_t = _xcb_im_packet_header_fr_t;
#[repr(C)]
pub struct _xcb_im_error_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub Error_Code: u16,
    pub length_of_error_detail: u16,
    pub type_of_error_detail: u16,
    pub error_detail: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_error_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_error_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_error_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_error_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_error_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_error_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_error_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_error_fr_t>())).input_context_ID as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_error_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_error_fr_t>())).flag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_error_fr_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_error_fr_t>())).Error_Code as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_error_fr_t),
            "::",
            stringify!(Error_Code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_error_fr_t>())).length_of_error_detail as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_error_fr_t),
            "::",
            stringify!(length_of_error_detail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_error_fr_t>())).type_of_error_detail as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_error_fr_t),
            "::",
            stringify!(type_of_error_detail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_error_fr_t>())).error_detail as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_error_fr_t),
            "::",
            stringify!(error_detail)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_error_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_error_fr_t {{ error_detail: {:?} }}",
            self.error_detail
        )
    }
}
pub type xcb_im_error_fr_t = _xcb_im_error_fr_t;
#[repr(C)]
pub struct _xcb_im_connect_fr_t {
    pub byte_order: u8,
    pub client_major_protocol_version: u16,
    pub client_minor_protocol_version: u16,
    pub client_auth_protocol_names: _xcb_im_connect_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_connect_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xpcs_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_connect_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_connect_fr_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_connect_fr_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_connect_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_connect_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_connect_fr_t__bindgen_ty_1>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_connect_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_connect_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_connect_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_connect_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_connect_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_connect_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_connect_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_connect_fr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_connect_fr_t>())).byte_order as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_fr_t),
            "::",
            stringify!(byte_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_connect_fr_t>())).client_major_protocol_version
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_fr_t),
            "::",
            stringify!(client_major_protocol_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_connect_fr_t>())).client_minor_protocol_version
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_fr_t),
            "::",
            stringify!(client_minor_protocol_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_connect_fr_t>())).client_auth_protocol_names as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_fr_t),
            "::",
            stringify!(client_auth_protocol_names)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_connect_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_connect_fr_t {{ client_auth_protocol_names: {:?} }}",
            self.client_auth_protocol_names
        )
    }
}
pub type xcb_im_connect_fr_t = _xcb_im_connect_fr_t;
#[repr(C)]
pub struct _xcb_im_connect_reply_fr_t {
    pub server_major_protocol_version: u16,
    pub server_minor_protocol_version: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_connect_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_connect_reply_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_connect_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_connect_reply_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_connect_reply_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_connect_reply_fr_t>())).server_major_protocol_version
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_reply_fr_t),
            "::",
            stringify!(server_major_protocol_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_connect_reply_fr_t>())).server_minor_protocol_version
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_connect_reply_fr_t),
            "::",
            stringify!(server_minor_protocol_version)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_connect_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_connect_reply_fr_t {{  }}")
    }
}
pub type xcb_im_connect_reply_fr_t = _xcb_im_connect_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_auth_required_fr_t {
    pub auth_protocol_index: u8,
    pub auth_data1: u8,
    pub auth_data2: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_auth_required_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_auth_required_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_auth_required_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_auth_required_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_auth_required_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_required_fr_t>())).auth_protocol_index as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_required_fr_t),
            "::",
            stringify!(auth_protocol_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_required_fr_t>())).auth_data1 as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_required_fr_t),
            "::",
            stringify!(auth_data1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_required_fr_t>())).auth_data2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_required_fr_t),
            "::",
            stringify!(auth_data2)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_auth_required_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_auth_required_fr_t {{ auth_data2: {:?} }}",
            self.auth_data2
        )
    }
}
pub type xcb_im_auth_required_fr_t = _xcb_im_auth_required_fr_t;
#[repr(C)]
pub struct _xcb_im_auth_reply_fr_t {
    pub field0: u8,
    pub field1: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_auth_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_auth_reply_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_auth_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_auth_reply_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_auth_reply_fr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_auth_reply_fr_t>())).field0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_reply_fr_t),
            "::",
            stringify!(field0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_auth_reply_fr_t>())).field1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_reply_fr_t),
            "::",
            stringify!(field1)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_auth_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_auth_reply_fr_t {{ field1: {:?} }}", self.field1)
    }
}
pub type xcb_im_auth_reply_fr_t = _xcb_im_auth_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_auth_next_fr_t {
    pub auth_data1: u8,
    pub auth_data2: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_auth_next_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_auth_next_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_auth_next_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_auth_next_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_auth_next_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_next_fr_t>())).auth_data1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_next_fr_t),
            "::",
            stringify!(auth_data1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_next_fr_t>())).auth_data2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_next_fr_t),
            "::",
            stringify!(auth_data2)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_auth_next_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_auth_next_fr_t {{ auth_data2: {:?} }}",
            self.auth_data2
        )
    }
}
pub type xcb_im_auth_next_fr_t = _xcb_im_auth_next_fr_t;
#[repr(C)]
pub struct _xcb_im_auth_setup_fr_t {
    pub server_auth_protocol_names: _xcb_im_auth_setup_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_auth_setup_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xpcs_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_auth_setup_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_auth_setup_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_auth_setup_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_auth_setup_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_auth_setup_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_setup_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_setup_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_setup_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_setup_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_auth_setup_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_auth_setup_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_auth_setup_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_auth_setup_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_auth_setup_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_auth_setup_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_auth_setup_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_auth_setup_fr_t>())).server_auth_protocol_names
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_auth_setup_fr_t),
            "::",
            stringify!(server_auth_protocol_names)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_auth_setup_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_auth_setup_fr_t {{ server_auth_protocol_names: {:?} }}",
            self.server_auth_protocol_names
        )
    }
}
pub type xcb_im_auth_setup_fr_t = _xcb_im_auth_setup_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_auth_ng_fr_t {}
#[test]
fn bindgen_test_layout__xcb_im_auth_ng_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_auth_ng_fr_t>(),
        0usize,
        concat!("Size of: ", stringify!(_xcb_im_auth_ng_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_auth_ng_fr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_xcb_im_auth_ng_fr_t))
    );
}
pub type xcb_im_auth_ng_fr_t = _xcb_im_auth_ng_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_disconnect_fr_t {}
#[test]
fn bindgen_test_layout__xcb_im_disconnect_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_disconnect_fr_t>(),
        0usize,
        concat!("Size of: ", stringify!(_xcb_im_disconnect_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_disconnect_fr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_xcb_im_disconnect_fr_t))
    );
}
pub type xcb_im_disconnect_fr_t = _xcb_im_disconnect_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_disconnect_reply_fr_t {}
#[test]
fn bindgen_test_layout__xcb_im_disconnect_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_disconnect_reply_fr_t>(),
        0usize,
        concat!("Size of: ", stringify!(_xcb_im_disconnect_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_disconnect_reply_fr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_xcb_im_disconnect_reply_fr_t))
    );
}
pub type xcb_im_disconnect_reply_fr_t = _xcb_im_disconnect_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_open_fr_t {
    pub field0: xcb_im_str_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_open_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_open_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_open_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_open_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_open_fr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_open_fr_t>())).field0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_fr_t),
            "::",
            stringify!(field0)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_open_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_open_fr_t {{ field0: {:?} }}", self.field0)
    }
}
pub type xcb_im_open_fr_t = _xcb_im_open_fr_t;
#[repr(C)]
pub struct _xcb_im_open_reply_fr_t {
    pub input_method_ID: u16,
    pub IM_attribute_supported: _xcb_im_open_reply_fr_t__bindgen_ty_1,
    pub IC_attribute_supported: _xcb_im_open_reply_fr_t__bindgen_ty_2,
}
#[repr(C)]
pub struct _xcb_im_open_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ximattr_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_open_reply_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_open_reply_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_open_reply_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_open_reply_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_open_reply_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_open_reply_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_open_reply_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[repr(C)]
pub struct _xcb_im_open_reply_fr_t__bindgen_ty_2 {
    pub size: u32,
    pub items: *mut xcb_im_xicattr_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_open_reply_fr_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_open_reply_fr_t__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_open_reply_fr_t__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_open_reply_fr_t__bindgen_ty_2>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_open_reply_fr_t__bindgen_ty_2>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_reply_fr_t__bindgen_ty_2),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_open_reply_fr_t__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_open_reply_fr_t__bindgen_ty_2 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_open_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_open_reply_fr_t>(),
        40usize,
        concat!("Size of: ", stringify!(_xcb_im_open_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_open_reply_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_open_reply_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_open_reply_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_open_reply_fr_t>())).IM_attribute_supported as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_reply_fr_t),
            "::",
            stringify!(IM_attribute_supported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_open_reply_fr_t>())).IC_attribute_supported as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_open_reply_fr_t),
            "::",
            stringify!(IC_attribute_supported)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_open_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "_xcb_im_open_reply_fr_t {{ IM_attribute_supported: {:?}, IC_attribute_supported: {:?} }}" , self . IM_attribute_supported , self . IC_attribute_supported )
    }
}
pub type xcb_im_open_reply_fr_t = _xcb_im_open_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_close_fr_t {
    pub input_method_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_close_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_close_fr_t>(),
        2usize,
        concat!("Size of: ", stringify!(_xcb_im_close_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_close_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_close_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_close_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_close_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_close_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_close_fr_t {{  }}")
    }
}
pub type xcb_im_close_fr_t = _xcb_im_close_fr_t;
#[repr(C)]
pub struct _xcb_im_close_reply_fr_t {
    pub input_method_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_close_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_close_reply_fr_t>(),
        2usize,
        concat!("Size of: ", stringify!(_xcb_im_close_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_close_reply_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_close_reply_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_close_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_close_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_close_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_close_reply_fr_t {{  }}")
    }
}
pub type xcb_im_close_reply_fr_t = _xcb_im_close_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_register_triggerkeys_fr_t {
    pub input_method_ID: u16,
    pub on_keys_list: _xcb_im_register_triggerkeys_fr_t__bindgen_ty_1,
    pub off_keys_list: _xcb_im_register_triggerkeys_fr_t__bindgen_ty_2,
}
#[repr(C)]
pub struct _xcb_im_register_triggerkeys_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ximtriggerkey_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_register_triggerkeys_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_register_triggerkeys_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_register_triggerkeys_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[repr(C)]
pub struct _xcb_im_register_triggerkeys_fr_t__bindgen_ty_2 {
    pub size: u32,
    pub items: *mut xcb_im_ximtriggerkey_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_register_triggerkeys_fr_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_register_triggerkeys_fr_t__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_register_triggerkeys_fr_t__bindgen_ty_2 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_register_triggerkeys_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_register_triggerkeys_fr_t>(),
        40usize,
        concat!("Size of: ", stringify!(_xcb_im_register_triggerkeys_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_register_triggerkeys_fr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_register_triggerkeys_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_register_triggerkeys_fr_t>())).input_method_ID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_register_triggerkeys_fr_t>())).on_keys_list as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t),
            "::",
            stringify!(on_keys_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_register_triggerkeys_fr_t>())).off_keys_list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_register_triggerkeys_fr_t),
            "::",
            stringify!(off_keys_list)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_register_triggerkeys_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_register_triggerkeys_fr_t {{ on_keys_list: {:?}, off_keys_list: {:?} }}",
            self.on_keys_list, self.off_keys_list
        )
    }
}
pub type xcb_im_register_triggerkeys_fr_t = _xcb_im_register_triggerkeys_fr_t;
#[repr(C)]
pub struct _xcb_im_trigger_notify_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u32,
    pub index_of_keys_list: u32,
    pub client_select_event_mask: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_trigger_notify_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_trigger_notify_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_trigger_notify_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_trigger_notify_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_trigger_notify_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_trigger_notify_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_notify_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_trigger_notify_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_notify_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_trigger_notify_fr_t>())).flag as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_notify_fr_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_trigger_notify_fr_t>())).index_of_keys_list as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_notify_fr_t),
            "::",
            stringify!(index_of_keys_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_trigger_notify_fr_t>())).client_select_event_mask
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_notify_fr_t),
            "::",
            stringify!(client_select_event_mask)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_trigger_notify_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_trigger_notify_fr_t {{  }}")
    }
}
pub type xcb_im_trigger_notify_fr_t = _xcb_im_trigger_notify_fr_t;
#[repr(C)]
pub struct _xcb_im_trigger_notify_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_trigger_notify_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_trigger_notify_reply_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_trigger_notify_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_trigger_notify_reply_fr_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_trigger_notify_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_trigger_notify_reply_fr_t>())).input_method_ID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_notify_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_trigger_notify_reply_fr_t>())).input_context_ID
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_notify_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_trigger_notify_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_trigger_notify_reply_fr_t {{  }}")
    }
}
pub type xcb_im_trigger_notify_reply_fr_t = _xcb_im_trigger_notify_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_set_event_mask_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub forward_event_mask: u32,
    pub synchronous_event_mask: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_set_event_mask_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_set_event_mask_fr_t>(),
        12usize,
        concat!("Size of: ", stringify!(_xcb_im_set_event_mask_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_set_event_mask_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_set_event_mask_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_event_mask_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_event_mask_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_event_mask_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_event_mask_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_event_mask_fr_t>())).forward_event_mask as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_event_mask_fr_t),
            "::",
            stringify!(forward_event_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_event_mask_fr_t>())).synchronous_event_mask
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_event_mask_fr_t),
            "::",
            stringify!(synchronous_event_mask)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_set_event_mask_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_set_event_mask_fr_t {{  }}")
    }
}
pub type xcb_im_set_event_mask_fr_t = _xcb_im_set_event_mask_fr_t;
#[repr(C)]
pub struct _xcb_im_encoding_negotiation_fr_t {
    pub input_method_ID: u16,
    pub supported_list_of_encoding_in_IM_library: _xcb_im_encoding_negotiation_fr_t__bindgen_ty_1,
    pub list_of_encodings_supported_in_th: _xcb_im_encoding_negotiation_fr_t__bindgen_ty_2,
}
#[repr(C)]
pub struct _xcb_im_encoding_negotiation_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_str_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_encoding_negotiation_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_encoding_negotiation_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_encoding_negotiation_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[repr(C)]
pub struct _xcb_im_encoding_negotiation_fr_t__bindgen_ty_2 {
    pub size: u32,
    pub items: *mut xcb_im_encodinginfo_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_encoding_negotiation_fr_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_encoding_negotiation_fr_t__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_encoding_negotiation_fr_t__bindgen_ty_2 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_encoding_negotiation_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_encoding_negotiation_fr_t>(),
        40usize,
        concat!("Size of: ", stringify!(_xcb_im_encoding_negotiation_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_encoding_negotiation_fr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_encoding_negotiation_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_fr_t>())).input_method_ID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_fr_t>()))
                .supported_list_of_encoding_in_IM_library as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t),
            "::",
            stringify!(supported_list_of_encoding_in_IM_library)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_fr_t>()))
                .list_of_encodings_supported_in_th as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_fr_t),
            "::",
            stringify!(list_of_encodings_supported_in_th)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_encoding_negotiation_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "_xcb_im_encoding_negotiation_fr_t {{ supported_list_of_encoding_in_IM_library: {:?}, list_of_encodings_supported_in_th: {:?} }}" , self . supported_list_of_encoding_in_IM_library , self . list_of_encodings_supported_in_th )
    }
}
pub type xcb_im_encoding_negotiation_fr_t = _xcb_im_encoding_negotiation_fr_t;
#[repr(C)]
pub struct _xcb_im_encoding_negotiation_reply_fr_t {
    pub input_method_ID: u16,
    pub category_of_the_encoding_determined: u16,
    pub index_of_the_encoding_determined: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_encoding_negotiation_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_encoding_negotiation_reply_fr_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_encoding_negotiation_reply_fr_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_encoding_negotiation_reply_fr_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_encoding_negotiation_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_reply_fr_t>())).input_method_ID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_reply_fr_t>()))
                .category_of_the_encoding_determined as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_reply_fr_t),
            "::",
            stringify!(category_of_the_encoding_determined)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_encoding_negotiation_reply_fr_t>()))
                .index_of_the_encoding_determined as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encoding_negotiation_reply_fr_t),
            "::",
            stringify!(index_of_the_encoding_determined)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_encoding_negotiation_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_encoding_negotiation_reply_fr_t {{  }}")
    }
}
pub type xcb_im_encoding_negotiation_reply_fr_t = _xcb_im_encoding_negotiation_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_query_extension_fr_t {
    pub input_method_ID: u16,
    pub extensions_supported_by_the_IM_library: _xcb_im_query_extension_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_query_extension_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_str_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_query_extension_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_query_extension_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_query_extension_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_query_extension_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_query_extension_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_query_extension_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_query_extension_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_query_extension_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_query_extension_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_query_extension_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_query_extension_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_query_extension_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_fr_t>()))
                .extensions_supported_by_the_IM_library as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_fr_t),
            "::",
            stringify!(extensions_supported_by_the_IM_library)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_query_extension_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_query_extension_fr_t {{ extensions_supported_by_the_IM_library: {:?} }}",
            self.extensions_supported_by_the_IM_library
        )
    }
}
pub type xcb_im_query_extension_fr_t = _xcb_im_query_extension_fr_t;
#[repr(C)]
pub struct _xcb_im_query_extension_reply_fr_t {
    pub input_method_ID: u16,
    pub list_of_extensions_supported_by_th: _xcb_im_query_extension_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_query_extension_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ext_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_query_extension_reply_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_query_extension_reply_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_query_extension_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_query_extension_reply_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_query_extension_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_reply_fr_t__bindgen_ty_1>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_reply_fr_t__bindgen_ty_1>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_query_extension_reply_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_query_extension_reply_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_query_extension_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_query_extension_reply_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_query_extension_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_query_extension_reply_fr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_query_extension_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_reply_fr_t>())).input_method_ID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_query_extension_reply_fr_t>()))
                .list_of_extensions_supported_by_th as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_query_extension_reply_fr_t),
            "::",
            stringify!(list_of_extensions_supported_by_th)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_query_extension_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_query_extension_reply_fr_t {{ list_of_extensions_supported_by_th: {:?} }}",
            self.list_of_extensions_supported_by_th
        )
    }
}
pub type xcb_im_query_extension_reply_fr_t = _xcb_im_query_extension_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_get_im_values_fr_t {
    pub input_method_ID: u16,
    pub im_attribute_id: _xcb_im_get_im_values_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_get_im_values_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u16,
}
#[test]
fn bindgen_test_layout__xcb_im_get_im_values_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_im_values_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_get_im_values_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_im_values_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_get_im_values_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_im_values_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_im_values_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_get_im_values_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_im_values_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_get_im_values_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_im_values_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_get_im_values_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_fr_t>())).im_attribute_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_fr_t),
            "::",
            stringify!(im_attribute_id)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_im_values_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_im_values_fr_t {{ im_attribute_id: {:?} }}",
            self.im_attribute_id
        )
    }
}
pub type xcb_im_get_im_values_fr_t = _xcb_im_get_im_values_fr_t;
#[repr(C)]
pub struct _xcb_im_get_im_values_reply_fr_t {
    pub input_method_ID: u16,
    pub im_attribute_returned: _xcb_im_get_im_values_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_get_im_values_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ximattribute_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_get_im_values_reply_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_im_values_reply_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_im_values_reply_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_get_im_values_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_im_values_reply_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_get_im_values_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_im_values_reply_fr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_get_im_values_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_im_values_reply_fr_t>())).im_attribute_returned
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_im_values_reply_fr_t),
            "::",
            stringify!(im_attribute_returned)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_im_values_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_im_values_reply_fr_t {{ im_attribute_returned: {:?} }}",
            self.im_attribute_returned
        )
    }
}
pub type xcb_im_get_im_values_reply_fr_t = _xcb_im_get_im_values_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_create_ic_fr_t {
    pub input_method_ID: u16,
    pub ic_attributes: _xcb_im_create_ic_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_create_ic_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xicattribute_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_create_ic_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_create_ic_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_create_ic_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_create_ic_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_create_ic_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_create_ic_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_create_ic_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_create_ic_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_create_ic_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_create_ic_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_create_ic_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_create_ic_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_create_ic_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_create_ic_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_create_ic_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_create_ic_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_create_ic_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_create_ic_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_create_ic_fr_t>())).ic_attributes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_create_ic_fr_t),
            "::",
            stringify!(ic_attributes)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_create_ic_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_create_ic_fr_t {{ ic_attributes: {:?} }}",
            self.ic_attributes
        )
    }
}
pub type xcb_im_create_ic_fr_t = _xcb_im_create_ic_fr_t;
#[repr(C)]
pub struct _xcb_im_create_ic_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_create_ic_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_create_ic_reply_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_create_ic_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_create_ic_reply_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_create_ic_reply_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_create_ic_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_create_ic_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_create_ic_reply_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_create_ic_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_create_ic_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_create_ic_reply_fr_t {{  }}")
    }
}
pub type xcb_im_create_ic_reply_fr_t = _xcb_im_create_ic_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_destroy_ic_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_destroy_ic_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_destroy_ic_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_destroy_ic_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_destroy_ic_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_destroy_ic_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_destroy_ic_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_destroy_ic_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_destroy_ic_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_destroy_ic_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_destroy_ic_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_destroy_ic_fr_t {{  }}")
    }
}
pub type xcb_im_destroy_ic_fr_t = _xcb_im_destroy_ic_fr_t;
#[repr(C)]
pub struct _xcb_im_destroy_ic_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_destroy_ic_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_destroy_ic_reply_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_destroy_ic_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_destroy_ic_reply_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_destroy_ic_reply_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_destroy_ic_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_destroy_ic_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_destroy_ic_reply_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_destroy_ic_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_destroy_ic_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_destroy_ic_reply_fr_t {{  }}")
    }
}
pub type xcb_im_destroy_ic_reply_fr_t = _xcb_im_destroy_ic_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_set_ic_values_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub ic_attribute: _xcb_im_set_ic_values_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_set_ic_values_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xicattribute_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_set_ic_values_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_set_ic_values_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_set_ic_values_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_set_ic_values_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_set_ic_values_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_values_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_values_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_values_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_values_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_set_ic_values_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_set_ic_values_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_set_ic_values_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_set_ic_values_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_set_ic_values_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_set_ic_values_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_set_ic_values_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_values_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_values_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_values_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_values_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_values_fr_t>())).ic_attribute as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_values_fr_t),
            "::",
            stringify!(ic_attribute)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_set_ic_values_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_set_ic_values_fr_t {{ ic_attribute: {:?} }}",
            self.ic_attribute
        )
    }
}
pub type xcb_im_set_ic_values_fr_t = _xcb_im_set_ic_values_fr_t;
#[repr(C)]
pub struct _xcb_im_set_ic_values_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_set_ic_values_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_set_ic_values_reply_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_set_ic_values_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_set_ic_values_reply_fr_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_set_ic_values_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_values_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_values_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_values_reply_fr_t>())).input_context_ID
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_values_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_set_ic_values_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_set_ic_values_reply_fr_t {{  }}")
    }
}
pub type xcb_im_set_ic_values_reply_fr_t = _xcb_im_set_ic_values_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_get_ic_values_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub ic_attribute: _xcb_im_get_ic_values_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_get_ic_values_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u16,
}
#[test]
fn bindgen_test_layout__xcb_im_get_ic_values_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_ic_values_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_get_ic_values_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_ic_values_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_get_ic_values_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_ic_values_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_ic_values_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_get_ic_values_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_ic_values_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_get_ic_values_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_ic_values_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_get_ic_values_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_fr_t>())).ic_attribute as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_fr_t),
            "::",
            stringify!(ic_attribute)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_ic_values_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_ic_values_fr_t {{ ic_attribute: {:?} }}",
            self.ic_attribute
        )
    }
}
pub type xcb_im_get_ic_values_fr_t = _xcb_im_get_ic_values_fr_t;
#[repr(C)]
pub struct _xcb_im_get_ic_values_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub ic_attribute: _xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xicattribute_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_get_ic_values_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_get_ic_values_reply_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_get_ic_values_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_get_ic_values_reply_fr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_reply_fr_t>())).input_context_ID
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_get_ic_values_reply_fr_t>())).ic_attribute as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_get_ic_values_reply_fr_t),
            "::",
            stringify!(ic_attribute)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_get_ic_values_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_get_ic_values_reply_fr_t {{ ic_attribute: {:?} }}",
            self.ic_attribute
        )
    }
}
pub type xcb_im_get_ic_values_reply_fr_t = _xcb_im_get_ic_values_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_set_ic_focus_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_set_ic_focus_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_set_ic_focus_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_set_ic_focus_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_set_ic_focus_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_set_ic_focus_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_focus_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_focus_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_set_ic_focus_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_set_ic_focus_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_set_ic_focus_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_set_ic_focus_fr_t {{  }}")
    }
}
pub type xcb_im_set_ic_focus_fr_t = _xcb_im_set_ic_focus_fr_t;
#[repr(C)]
pub struct _xcb_im_unset_ic_focus_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_unset_ic_focus_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_unset_ic_focus_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_unset_ic_focus_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_unset_ic_focus_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_unset_ic_focus_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_unset_ic_focus_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_unset_ic_focus_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_unset_ic_focus_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_unset_ic_focus_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_unset_ic_focus_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_unset_ic_focus_fr_t {{  }}")
    }
}
pub type xcb_im_unset_ic_focus_fr_t = _xcb_im_unset_ic_focus_fr_t;
#[repr(C)]
pub struct _xcb_im_forward_event_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub sequence_number: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_forward_event_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_forward_event_fr_t>(),
        8usize,
        concat!("Size of: ", stringify!(_xcb_im_forward_event_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_forward_event_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_forward_event_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_forward_event_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_forward_event_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_forward_event_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_forward_event_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_forward_event_fr_t>())).flag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_forward_event_fr_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_forward_event_fr_t>())).sequence_number as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_forward_event_fr_t),
            "::",
            stringify!(sequence_number)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_forward_event_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_forward_event_fr_t {{  }}")
    }
}
pub type xcb_im_forward_event_fr_t = _xcb_im_forward_event_fr_t;
#[repr(C)]
pub struct _xcb_im_sync_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_sync_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_sync_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_sync_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_sync_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_sync_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_sync_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_sync_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_sync_fr_t>())).input_context_ID as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_sync_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_sync_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_sync_fr_t {{  }}")
    }
}
pub type xcb_im_sync_fr_t = _xcb_im_sync_fr_t;
#[repr(C)]
pub struct _xcb_im_sync_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_sync_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_sync_reply_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_sync_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_sync_reply_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_sync_reply_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_sync_reply_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_sync_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_sync_reply_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_sync_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_sync_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_sync_reply_fr_t {{  }}")
    }
}
pub type xcb_im_sync_reply_fr_t = _xcb_im_sync_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_commit_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
    pub keysym: _xcb_im_commit_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_commit_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
#[test]
fn bindgen_test_layout__xcb_im_commit_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_commit_fr_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_commit_fr_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_commit_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_commit_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_fr_t__bindgen_ty_1>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_fr_t__bindgen_ty_1>())).items as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_commit_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_commit_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_commit_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_commit_fr_t>(),
        32usize,
        concat!("Size of: ", stringify!(_xcb_im_commit_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_commit_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_commit_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_fr_t>())).input_context_ID as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_commit_fr_t>())).flag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_fr_t>())).byte_length_of_committed_string
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t),
            "::",
            stringify!(byte_length_of_committed_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_fr_t>())).committed_string as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t),
            "::",
            stringify!(committed_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_commit_fr_t>())).keysym as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_fr_t),
            "::",
            stringify!(keysym)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_commit_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_commit_fr_t {{ committed_string: {:?}, keysym: {:?} }}",
            self.committed_string, self.keysym
        )
    }
}
pub type xcb_im_commit_fr_t = _xcb_im_commit_fr_t;
#[repr(C)]
pub struct _xcb_im_commit_chars_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_commit_chars_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_commit_chars_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_commit_chars_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_commit_chars_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_commit_chars_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_chars_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_chars_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_chars_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_chars_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_commit_chars_fr_t>())).flag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_chars_fr_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_chars_fr_t>())).byte_length_of_committed_string
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_chars_fr_t),
            "::",
            stringify!(byte_length_of_committed_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_chars_fr_t>())).committed_string as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_chars_fr_t),
            "::",
            stringify!(committed_string)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_commit_chars_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_commit_chars_fr_t {{ committed_string: {:?} }}",
            self.committed_string
        )
    }
}
pub type xcb_im_commit_chars_fr_t = _xcb_im_commit_chars_fr_t;
#[repr(C)]
pub struct _xcb_im_commit_both_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub keysym: u32,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_commit_both_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_commit_both_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_commit_both_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_commit_both_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_commit_both_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_both_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_both_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_both_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_both_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_commit_both_fr_t>())).flag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_both_fr_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_commit_both_fr_t>())).keysym as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_both_fr_t),
            "::",
            stringify!(keysym)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_both_fr_t>())).byte_length_of_committed_string
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_both_fr_t),
            "::",
            stringify!(byte_length_of_committed_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_commit_both_fr_t>())).committed_string as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_commit_both_fr_t),
            "::",
            stringify!(committed_string)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_commit_both_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_commit_both_fr_t {{ committed_string: {:?} }}",
            self.committed_string
        )
    }
}
pub type xcb_im_commit_both_fr_t = _xcb_im_commit_both_fr_t;
#[repr(C)]
pub struct _xcb_im_reset_ic_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_reset_ic_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_reset_ic_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_reset_ic_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_reset_ic_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_reset_ic_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_reset_ic_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_reset_ic_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_reset_ic_fr_t>())).input_context_ID as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_reset_ic_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_reset_ic_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_reset_ic_fr_t {{  }}")
    }
}
pub type xcb_im_reset_ic_fr_t = _xcb_im_reset_ic_fr_t;
#[repr(C)]
pub struct _xcb_im_reset_ic_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_reset_ic_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_reset_ic_reply_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_reset_ic_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_reset_ic_reply_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_reset_ic_reply_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_reset_ic_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_reset_ic_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_reset_ic_reply_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_reset_ic_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_reset_ic_reply_fr_t>())).byte_length_of_committed_string
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_reset_ic_reply_fr_t),
            "::",
            stringify!(byte_length_of_committed_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_reset_ic_reply_fr_t>())).committed_string as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_reset_ic_reply_fr_t),
            "::",
            stringify!(committed_string)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_reset_ic_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_reset_ic_reply_fr_t {{ committed_string: {:?} }}",
            self.committed_string
        )
    }
}
pub type xcb_im_reset_ic_reply_fr_t = _xcb_im_reset_ic_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_geometry_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_geometry_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_geometry_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_geometry_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_geometry_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_geometry_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_geometry_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_geometry_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_geometry_fr_t>())).input_context_ID as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_geometry_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_geometry_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_geometry_fr_t {{  }}")
    }
}
pub type xcb_im_geometry_fr_t = _xcb_im_geometry_fr_t;
#[repr(C)]
pub struct _xcb_im_str_conversion_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub XIMStringConversionPosition: u32,
    pub XIMStringConversionType: u32,
    pub XIMStringConversionOperation: u32,
    pub length_to_multiply_th: u16,
    pub length_of_the_string_to_b: u16,
    pub string: xcb_im_bytearray_t,
}
#[test]
fn bindgen_test_layout__xcb_im_str_conversion_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_str_conversion_fr_t>(),
        32usize,
        concat!("Size of: ", stringify!(_xcb_im_str_conversion_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_str_conversion_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_str_conversion_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).XIMStringConversionPosition
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(XIMStringConversionPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).XIMStringConversionType
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(XIMStringConversionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).XIMStringConversionOperation
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(XIMStringConversionOperation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).length_to_multiply_th
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(length_to_multiply_th)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).length_of_the_string_to_b
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(length_of_the_string_to_b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_fr_t>())).string as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_fr_t),
            "::",
            stringify!(string)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_str_conversion_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_str_conversion_fr_t {{ string: {:?} }}",
            self.string
        )
    }
}
pub type xcb_im_str_conversion_fr_t = _xcb_im_str_conversion_fr_t;
#[repr(C)]
pub struct _xcb_im_str_conversion_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub XIMStringConversionFeedback: u32,
    pub length_of_the_retrieved_string: u16,
    pub retrieved_string: xcb_im_bytearray_t,
    pub feedback_array: _xcb_im_str_conversion_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_str_conversion_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
#[test]
fn bindgen_test_layout__xcb_im_str_conversion_reply_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_str_conversion_reply_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_str_conversion_reply_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_str_conversion_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_str_conversion_reply_fr_t>(),
        40usize,
        concat!("Size of: ", stringify!(_xcb_im_str_conversion_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_str_conversion_reply_fr_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_str_conversion_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t>())).input_method_ID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t>())).input_context_ID
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t>()))
                .XIMStringConversionFeedback as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t),
            "::",
            stringify!(XIMStringConversionFeedback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t>()))
                .length_of_the_retrieved_string as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t),
            "::",
            stringify!(length_of_the_retrieved_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t>())).retrieved_string
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t),
            "::",
            stringify!(retrieved_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_str_conversion_reply_fr_t>())).feedback_array as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_str_conversion_reply_fr_t),
            "::",
            stringify!(feedback_array)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_str_conversion_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_str_conversion_reply_fr_t {{ retrieved_string: {:?}, feedback_array: {:?} }}",
            self.retrieved_string, self.feedback_array
        )
    }
}
pub type xcb_im_str_conversion_reply_fr_t = _xcb_im_str_conversion_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_preedit_start_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_start_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_start_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_preedit_start_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_start_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_preedit_start_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_start_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_start_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_start_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_start_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_start_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_preedit_start_fr_t {{  }}")
    }
}
pub type xcb_im_preedit_start_fr_t = _xcb_im_preedit_start_fr_t;
#[repr(C)]
pub struct _xcb_im_preedit_start_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub return_value: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_start_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_start_reply_fr_t>(),
        8usize,
        concat!("Size of: ", stringify!(_xcb_im_preedit_start_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_start_reply_fr_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_preedit_start_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_start_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_start_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_start_reply_fr_t>())).input_context_ID
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_start_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_start_reply_fr_t>())).return_value as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_start_reply_fr_t),
            "::",
            stringify!(return_value)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_start_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_preedit_start_reply_fr_t {{  }}")
    }
}
pub type xcb_im_preedit_start_reply_fr_t = _xcb_im_preedit_start_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_preedit_draw_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub caret: u32,
    pub chg_first: u32,
    pub chg_length: u32,
    pub status: u32,
    pub length_of_preedit_string: u16,
    pub preedit_string: xcb_im_bytearray_t,
    pub feedback_array: _xcb_im_preedit_draw_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_preedit_draw_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_draw_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_draw_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_preedit_draw_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_draw_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_preedit_draw_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t__bindgen_ty_1>())).items as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_draw_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_preedit_draw_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_draw_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_draw_fr_t>(),
        48usize,
        concat!("Size of: ", stringify!(_xcb_im_preedit_draw_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_draw_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_preedit_draw_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).caret as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(caret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).chg_first as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(chg_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).chg_length as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(chg_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).status as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).length_of_preedit_string
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(length_of_preedit_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).preedit_string as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(preedit_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_draw_fr_t>())).feedback_array as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_draw_fr_t),
            "::",
            stringify!(feedback_array)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_draw_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_preedit_draw_fr_t {{ preedit_string: {:?}, feedback_array: {:?} }}",
            self.preedit_string, self.feedback_array
        )
    }
}
pub type xcb_im_preedit_draw_fr_t = _xcb_im_preedit_draw_fr_t;
#[repr(C)]
pub struct _xcb_im_preedit_caret_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub position: u32,
    pub direction: u32,
    pub style: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_caret_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_caret_fr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_preedit_caret_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_caret_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_preedit_caret_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_fr_t>())).position as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_fr_t),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_fr_t>())).direction as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_fr_t),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_fr_t>())).style as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_fr_t),
            "::",
            stringify!(style)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_caret_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_preedit_caret_fr_t {{  }}")
    }
}
pub type xcb_im_preedit_caret_fr_t = _xcb_im_preedit_caret_fr_t;
#[repr(C)]
pub struct _xcb_im_preedit_caret_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub position: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_caret_reply_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_caret_reply_fr_t>(),
        8usize,
        concat!("Size of: ", stringify!(_xcb_im_preedit_caret_reply_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_caret_reply_fr_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_preedit_caret_reply_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_reply_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_reply_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_reply_fr_t>())).input_context_ID
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_reply_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_caret_reply_fr_t>())).position as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_caret_reply_fr_t),
            "::",
            stringify!(position)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_caret_reply_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_preedit_caret_reply_fr_t {{  }}")
    }
}
pub type xcb_im_preedit_caret_reply_fr_t = _xcb_im_preedit_caret_reply_fr_t;
#[repr(C)]
pub struct _xcb_im_preedit_done_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_done_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_done_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_preedit_done_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_done_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_preedit_done_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_done_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_done_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_done_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_done_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_done_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_preedit_done_fr_t {{  }}")
    }
}
pub type xcb_im_preedit_done_fr_t = _xcb_im_preedit_done_fr_t;
#[repr(C)]
pub struct _xcb_im_status_start_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_status_start_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_status_start_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_status_start_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_status_start_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_status_start_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_start_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_start_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_start_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_start_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_status_start_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_status_start_fr_t {{  }}")
    }
}
pub type xcb_im_status_start_fr_t = _xcb_im_status_start_fr_t;
#[repr(C)]
pub struct _xcb_im_status_draw_text_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub type_: u32,
    pub status: u32,
    pub length_of_status_string: u16,
    pub status_string: xcb_im_bytearray_t,
    pub feedback_array: _xcb_im_status_draw_text_fr_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _xcb_im_status_draw_text_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
#[test]
fn bindgen_test_layout__xcb_im_status_draw_text_fr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_status_draw_text_fr_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xcb_im_status_draw_text_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_status_draw_text_fr_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_status_draw_text_fr_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t__bindgen_ty_1>())).items
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t__bindgen_ty_1),
            "::",
            stringify!(items)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_status_draw_text_fr_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_status_draw_text_fr_t__bindgen_ty_1 {{ items: {:?} }}",
            self.items
        )
    }
}
#[test]
fn bindgen_test_layout__xcb_im_status_draw_text_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_status_draw_text_fr_t>(),
        40usize,
        concat!("Size of: ", stringify!(_xcb_im_status_draw_text_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_status_draw_text_fr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_status_draw_text_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t>())).type_ as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t>())).status as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t>())).length_of_status_string
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t),
            "::",
            stringify!(length_of_status_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t>())).status_string as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t),
            "::",
            stringify!(status_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_text_fr_t>())).feedback_array as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_text_fr_t),
            "::",
            stringify!(feedback_array)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_status_draw_text_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "_xcb_im_status_draw_text_fr_t {{ status_string: {:?}, feedback_array: {:?} }}",
            self.status_string, self.feedback_array
        )
    }
}
pub type xcb_im_status_draw_text_fr_t = _xcb_im_status_draw_text_fr_t;
#[repr(C)]
pub struct _xcb_im_status_draw_bitmap_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub type_: u32,
    pub pixmap_data: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_status_draw_bitmap_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_status_draw_bitmap_fr_t>(),
        12usize,
        concat!("Size of: ", stringify!(_xcb_im_status_draw_bitmap_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_status_draw_bitmap_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_status_draw_bitmap_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_bitmap_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_bitmap_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_bitmap_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_bitmap_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_bitmap_fr_t>())).type_ as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_bitmap_fr_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_draw_bitmap_fr_t>())).pixmap_data as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_draw_bitmap_fr_t),
            "::",
            stringify!(pixmap_data)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_status_draw_bitmap_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_status_draw_bitmap_fr_t {{  }}")
    }
}
pub type xcb_im_status_draw_bitmap_fr_t = _xcb_im_status_draw_bitmap_fr_t;
#[repr(C)]
pub struct _xcb_im_status_done_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_status_done_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_status_done_fr_t>(),
        4usize,
        concat!("Size of: ", stringify!(_xcb_im_status_done_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_status_done_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_status_done_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_done_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_done_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_done_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_done_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_status_done_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_status_done_fr_t {{  }}")
    }
}
pub type xcb_im_status_done_fr_t = _xcb_im_status_done_fr_t;
#[repr(C)]
pub struct _xcb_im_ext_set_event_mask_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub filter_event_mask: u32,
    pub intercept_event_mask: u32,
    pub select_event_mask: u32,
    pub forward_event_mask: u32,
    pub synchronous_event_mask: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_ext_set_event_mask_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ext_set_event_mask_fr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_xcb_im_ext_set_event_mask_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ext_set_event_mask_fr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_ext_set_event_mask_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_set_event_mask_fr_t>())).input_method_ID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_set_event_mask_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_set_event_mask_fr_t>())).input_context_ID as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_set_event_mask_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_set_event_mask_fr_t>())).filter_event_mask
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_set_event_mask_fr_t),
            "::",
            stringify!(filter_event_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_set_event_mask_fr_t>())).intercept_event_mask
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_set_event_mask_fr_t),
            "::",
            stringify!(intercept_event_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_set_event_mask_fr_t>())).select_event_mask
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_set_event_mask_fr_t),
            "::",
            stringify!(select_event_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_set_event_mask_fr_t>())).forward_event_mask
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_set_event_mask_fr_t),
            "::",
            stringify!(forward_event_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_set_event_mask_fr_t>())).synchronous_event_mask
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_set_event_mask_fr_t),
            "::",
            stringify!(synchronous_event_mask)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ext_set_event_mask_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_ext_set_event_mask_fr_t {{  }}")
    }
}
pub type xcb_im_ext_set_event_mask_fr_t = _xcb_im_ext_set_event_mask_fr_t;
#[repr(C)]
pub struct _xcb_im_ext_forward_keyevent_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub sequence_number: u16,
    pub xEvent_u_u_type: u8,
    pub keycode: u8,
    pub state: u16,
    pub time: u32,
    pub window: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_ext_forward_keyevent_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ext_forward_keyevent_fr_t>(),
        20usize,
        concat!("Size of: ", stringify!(_xcb_im_ext_forward_keyevent_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ext_forward_keyevent_fr_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).input_method_ID
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).input_context_ID
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).flag as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).sequence_number
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(sequence_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).xEvent_u_u_type
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(xEvent_u_u_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).keycode as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(keycode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).state as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).time as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_forward_keyevent_fr_t>())).window as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_forward_keyevent_fr_t),
            "::",
            stringify!(window)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ext_forward_keyevent_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_ext_forward_keyevent_fr_t {{  }}")
    }
}
pub type xcb_im_ext_forward_keyevent_fr_t = _xcb_im_ext_forward_keyevent_fr_t;
#[repr(C)]
pub struct _xcb_im_ext_move_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub X: u16,
    pub Y: u16,
}
#[test]
fn bindgen_test_layout__xcb_im_ext_move_fr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ext_move_fr_t>(),
        8usize,
        concat!("Size of: ", stringify!(_xcb_im_ext_move_fr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ext_move_fr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_xcb_im_ext_move_fr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_move_fr_t>())).input_method_ID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_move_fr_t),
            "::",
            stringify!(input_method_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_ext_move_fr_t>())).input_context_ID as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_move_fr_t),
            "::",
            stringify!(input_context_ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_ext_move_fr_t>())).X as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_move_fr_t),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_ext_move_fr_t>())).Y as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_move_fr_t),
            "::",
            stringify!(Y)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ext_move_fr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_ext_move_fr_t {{  }}")
    }
}
pub type xcb_im_ext_move_fr_t = _xcb_im_ext_move_fr_t;
pub const xcb_xim_lookup_flags_t_XCB_XIM_SYNCHRONOUS: xcb_xim_lookup_flags_t = 1;
pub const xcb_xim_lookup_flags_t_XCB_XIM_LOOKUP_CHARS: xcb_xim_lookup_flags_t = 2;
pub const xcb_xim_lookup_flags_t_XCB_XIM_LOOKUP_KEYSYM: xcb_xim_lookup_flags_t = 4;
pub const xcb_xim_lookup_flags_t_XCB_XIM_LOOKUP_BOTH: xcb_xim_lookup_flags_t = 6;
pub type xcb_xim_lookup_flags_t = u32;
#[repr(C)]
pub struct _xcb_im_ext_list {
    pub name: *mut ::std::os::raw::c_char,
    pub major_opcode: u8,
    pub minor_opcode: u8,
}
#[test]
fn bindgen_test_layout__xcb_im_ext_list() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_ext_list>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_ext_list))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_ext_list>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_ext_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_ext_list>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_list),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_ext_list>())).major_opcode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_list),
            "::",
            stringify!(major_opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_ext_list>())).minor_opcode as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_ext_list),
            "::",
            stringify!(minor_opcode)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_ext_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_ext_list {{ name: {:?} }}", self.name)
    }
}
pub type xcb_im_ext_list = _xcb_im_ext_list;
pub const _xcb_im_style_t_XCB_IM_PreeditArea: _xcb_im_style_t = 1;
pub const _xcb_im_style_t_XCB_IM_PreeditCallbacks: _xcb_im_style_t = 2;
pub const _xcb_im_style_t_XCB_IM_PreeditPosition: _xcb_im_style_t = 4;
pub const _xcb_im_style_t_XCB_IM_PreeditNothing: _xcb_im_style_t = 8;
pub const _xcb_im_style_t_XCB_IM_PreeditNone: _xcb_im_style_t = 16;
pub const _xcb_im_style_t_XCB_IM_StatusArea: _xcb_im_style_t = 256;
pub const _xcb_im_style_t_XCB_IM_StatusCallbacks: _xcb_im_style_t = 512;
pub const _xcb_im_style_t_XCB_IM_StatusNothing: _xcb_im_style_t = 1024;
pub const _xcb_im_style_t_XCB_IM_StatusNone: _xcb_im_style_t = 2048;
pub type _xcb_im_style_t = u32;
pub use self::_xcb_im_style_t as xcb_im_style_t;
pub const XCB_IM_TextType: _bindgen_ty_1 = 0;
pub const XCB_IM_BitmapType: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = u32;
pub const xcb_im_feedback_t_XCB_XIM_REVERSE: xcb_im_feedback_t = 1;
pub const xcb_im_feedback_t_XCB_XIM_UNDERLINE: xcb_im_feedback_t = 2;
pub const xcb_im_feedback_t_XCB_XIM_HIGHLIGHT: xcb_im_feedback_t = 4;
pub const xcb_im_feedback_t_XCB_XIM_PRIMARY: xcb_im_feedback_t = 32;
pub const xcb_im_feedback_t_XCB_XIM_SECONDARY: xcb_im_feedback_t = 64;
pub const xcb_im_feedback_t_XCB_XIM_TERTIARY: xcb_im_feedback_t = 128;
pub const xcb_im_feedback_t_XCB_XIM_VISIBLE_TO_FORWARD: xcb_im_feedback_t = 256;
pub const xcb_im_feedback_t_XCB_XIM_VISIBLE_TO_BACKWORD: xcb_im_feedback_t = 512;
pub const xcb_im_feedback_t_XCB_XIM_VISIBLE_TO_CENTER: xcb_im_feedback_t = 1024;
pub type xcb_im_feedback_t = u32;
#[repr(C)]
pub struct _xcb_im_trigger_keys_t {
    pub nKeys: u16,
    pub keys: *mut xcb_im_ximtriggerkey_fr_t,
}
#[test]
fn bindgen_test_layout__xcb_im_trigger_keys_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_trigger_keys_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_trigger_keys_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_trigger_keys_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_trigger_keys_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_trigger_keys_t>())).nKeys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_keys_t),
            "::",
            stringify!(nKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_trigger_keys_t>())).keys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_trigger_keys_t),
            "::",
            stringify!(keys)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_trigger_keys_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_trigger_keys_t {{ keys: {:?} }}", self.keys)
    }
}
pub type xcb_im_trigger_keys_t = _xcb_im_trigger_keys_t;
#[repr(C)]
pub struct _xcb_im_styles_t {
    pub nStyles: u32,
    pub styles: *mut u32,
}
#[test]
fn bindgen_test_layout__xcb_im_styles_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_styles_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_styles_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_styles_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_styles_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_styles_t>())).nStyles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_styles_t),
            "::",
            stringify!(nStyles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_styles_t>())).styles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_styles_t),
            "::",
            stringify!(styles)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_styles_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_styles_t {{ styles: {:?} }}", self.styles)
    }
}
pub type xcb_im_styles_t = _xcb_im_styles_t;
pub type xcb_im_encoding_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_encodings_t {
    pub nEncodings: ::std::os::raw::c_ushort,
    pub encodings: *mut xcb_im_encoding_t,
}
#[test]
fn bindgen_test_layout__xcb_im_encodings_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_encodings_t>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_im_encodings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_encodings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_im_encodings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_encodings_t>())).nEncodings as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encodings_t),
            "::",
            stringify!(nEncodings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_encodings_t>())).encodings as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_encodings_t),
            "::",
            stringify!(encodings)
        )
    );
}
pub type xcb_im_encodings_t = _xcb_im_encodings_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_t {
    _unused: [u8; 0],
}
pub type xcb_im_t = _xcb_im_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_input_context_t {
    _unused: [u8; 0],
}
pub type xcb_im_input_context_t = _xcb_im_input_context_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_client_t {
    _unused: [u8; 0],
}
pub type xcb_im_client_t = _xcb_im_client_t;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNArea_MASK: _xcb_im_attr_mask_t = 1;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNAreaNeeded_MASK: _xcb_im_attr_mask_t = 2;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNSpotLocation_MASK: _xcb_im_attr_mask_t = 4;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNColormap_MASK: _xcb_im_attr_mask_t = 8;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNForeground_MASK: _xcb_im_attr_mask_t = 16;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNBackground_MASK: _xcb_im_attr_mask_t = 32;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNBackgroundPixmap_MASK: _xcb_im_attr_mask_t = 128;
pub const _xcb_im_attr_mask_t_XCB_XIM_XNLineSpace_MASK: _xcb_im_attr_mask_t = 256;
pub type _xcb_im_attr_mask_t = u32;
pub use self::_xcb_im_attr_mask_t as xcb_im_attr_mask_t;
#[repr(C)]
pub struct _xcb_im_preedit_attr_t {
    pub area: xcb_rectangle_t,
    pub area_needed: xcb_rectangle_t,
    pub spot_location: xcb_point_t,
    pub colormap: xcb_colormap_t,
    pub foreground: u32,
    pub background: u32,
    pub bg_pixmap: xcb_window_t,
    pub line_space: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_preedit_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_preedit_attr_t>(),
        40usize,
        concat!("Size of: ", stringify!(_xcb_im_preedit_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_preedit_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_preedit_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).area as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).area_needed as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(area_needed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).spot_location as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(spot_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).colormap as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).foreground as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(foreground)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).background as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).bg_pixmap as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(bg_pixmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_preedit_attr_t>())).line_space as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_preedit_attr_t),
            "::",
            stringify!(line_space)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_preedit_attr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_preedit_attr_t {{  }}")
    }
}
pub type xcb_im_preedit_attr_t = _xcb_im_preedit_attr_t;
#[repr(C)]
pub struct _xcb_im_status_attr_t {
    pub area: xcb_rectangle_t,
    pub area_needed: xcb_rectangle_t,
    pub spot_location: xcb_point_t,
    pub colormap: xcb_colormap_t,
    pub foreground: u32,
    pub background: u32,
    pub bg_pixmap: xcb_window_t,
    pub line_space: u32,
}
#[test]
fn bindgen_test_layout__xcb_im_status_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_im_status_attr_t>(),
        40usize,
        concat!("Size of: ", stringify!(_xcb_im_status_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_im_status_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_xcb_im_status_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).area as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).area_needed as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(area_needed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).spot_location as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(spot_location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).colormap as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).foreground as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(foreground)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).background as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).bg_pixmap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(bg_pixmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_im_status_attr_t>())).line_space as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_im_status_attr_t),
            "::",
            stringify!(line_space)
        )
    );
}
impl ::std::fmt::Debug for _xcb_im_status_attr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_im_status_attr_t {{  }}")
    }
}
pub type xcb_im_status_attr_t = _xcb_im_status_attr_t;
pub type xcb_im_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_im_t,
        client: *mut xcb_im_client_t,
        ic: *mut xcb_im_input_context_t,
        hdr: *const xcb_im_packet_header_fr_t,
        frame: *mut ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_im_free_function =
    ::std::option::Option<unsafe extern "C" fn(memory: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn xcb_im_create(
        conn: *mut xcb_connection_t,
        screen: ::std::os::raw::c_int,
        serverWindow: xcb_window_t,
        serverName: *const ::std::os::raw::c_char,
        locale: *const ::std::os::raw::c_char,
        inputStyles: *const xcb_im_styles_t,
        onKeysList: *const xcb_im_trigger_keys_t,
        offKeysList: *const xcb_im_trigger_keys_t,
        encodingList: *const xcb_im_encodings_t,
        event_mask: u32,
        callback: xcb_im_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut xcb_im_t;
}
extern "C" {
    pub fn xcb_im_open_im(im: *mut xcb_im_t) -> bool;
}
extern "C" {
    pub fn xcb_im_filter_event(im: *mut xcb_im_t, event: *mut xcb_generic_event_t) -> bool;
}
extern "C" {
    pub fn xcb_im_close_im(im: *mut xcb_im_t);
}
extern "C" {
    pub fn xcb_im_destroy(im: *mut xcb_im_t);
}
extern "C" {
    pub fn xcb_im_forward_event(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        event: *mut xcb_key_press_event_t,
    );
}
extern "C" {
    pub fn xcb_im_commit_string(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        flag: u32,
        str: *const ::std::os::raw::c_char,
        length: u32,
        keysym: u32,
    );
}
extern "C" {
    pub fn xcb_im_geometry_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_start_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_draw_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_preedit_draw_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_preedit_caret_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_preedit_caret_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_preedit_done_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_status_start_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_status_draw_text_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_status_draw_text_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_status_draw_bitmap_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_status_draw_bitmap_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_status_done_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_start(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_end(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_sync_xlib(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_support_extension(im: *mut xcb_im_t, major_code: u16, minor_code: u16) -> bool;
}
extern "C" {
    pub fn xcb_im_input_context_set_data(
        ic: *mut xcb_im_input_context_t,
        data: *mut ::std::os::raw::c_void,
        free_data_function: xcb_im_free_function,
    );
}
extern "C" {
    pub fn xcb_im_input_context_get_data(
        ic: *mut xcb_im_input_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xcb_im_input_context_get_input_style(ic: *mut xcb_im_input_context_t) -> u32;
}
extern "C" {
    pub fn xcb_im_input_context_get_client_window(ic: *mut xcb_im_input_context_t) -> xcb_window_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_focus_window(ic: *mut xcb_im_input_context_t) -> xcb_window_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_preedit_attr(
        ic: *mut xcb_im_input_context_t,
    ) -> *const xcb_im_preedit_attr_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_status_attr(
        ic: *mut xcb_im_input_context_t,
    ) -> *const xcb_im_status_attr_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_preedit_attr_mask(ic: *mut xcb_im_input_context_t) -> u32;
}
extern "C" {
    pub fn xcb_im_input_context_get_status_attr_mask(ic: *mut xcb_im_input_context_t) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_xim_t {
    _unused: [u8; 0],
}
pub type xcb_xim_t = _xcb_xim_t;
pub type xcb_xic_t = u16;
#[repr(C)]
pub struct _xcb_xim_nested_list {
    pub data: *mut u8,
    pub length: usize,
}
#[test]
fn bindgen_test_layout__xcb_xim_nested_list() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_xim_nested_list>(),
        16usize,
        concat!("Size of: ", stringify!(_xcb_xim_nested_list))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_xim_nested_list>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_xim_nested_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_xim_nested_list>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_nested_list),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_xim_nested_list>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_nested_list),
            "::",
            stringify!(length)
        )
    );
}
impl ::std::fmt::Debug for _xcb_xim_nested_list {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_xcb_xim_nested_list {{ data: {:?} }}", self.data)
    }
}
pub type xcb_xim_nested_list = _xcb_xim_nested_list;
pub type xcb_xim_set_event_mask_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        forward_event_mask: u32,
        synchronous_event_mask: u32,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_forward_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        event: *mut xcb_key_press_event_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_commit_string_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        flag: u32,
        str: *mut ::std::os::raw::c_char,
        length: u32,
        keysym: *mut u32,
        nKeySym: usize,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_geometry_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_preedit_start_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_preedit_draw_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_preedit_draw_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_preedit_caret_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_preedit_caret_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_preedit_done_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_status_start_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_status_draw_text_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_status_draw_text_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_status_draw_bitmap_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_status_draw_bitmap_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_status_done_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_sync_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_disconnected_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_xim_im_callback {
    pub set_event_mask: xcb_xim_set_event_mask_callback,
    pub forward_event: xcb_xim_forward_event_callback,
    pub commit_string: xcb_xim_commit_string_callback,
    pub geometry: xcb_xim_geometry_callback,
    pub preedit_start: xcb_xim_preedit_start_callback,
    pub preedit_draw: xcb_xim_preedit_draw_callback,
    pub preedit_caret: xcb_xim_preedit_caret_callback,
    pub preedit_done: xcb_xim_preedit_done_callback,
    pub status_start: xcb_xim_status_start_callback,
    pub status_draw_text: xcb_xim_status_draw_text_callback,
    pub status_draw_bitmap: xcb_xim_status_draw_bitmap_callback,
    pub status_done: xcb_xim_status_done_callback,
    pub sync: xcb_xim_sync_callback,
    pub disconnected: xcb_xim_disconnected_callback,
}
#[test]
fn bindgen_test_layout__xcb_xim_im_callback() {
    assert_eq!(
        ::std::mem::size_of::<_xcb_xim_im_callback>(),
        112usize,
        concat!("Size of: ", stringify!(_xcb_xim_im_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<_xcb_xim_im_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(_xcb_xim_im_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).set_event_mask as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(set_event_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).forward_event as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(forward_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).commit_string as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(commit_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_xim_im_callback>())).geometry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).preedit_start as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(preedit_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).preedit_draw as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(preedit_draw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).preedit_caret as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(preedit_caret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).preedit_done as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(preedit_done)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).status_start as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(status_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).status_draw_text as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(status_draw_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).status_draw_bitmap as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(status_draw_bitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).status_done as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(status_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xcb_xim_im_callback>())).sync as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xcb_xim_im_callback>())).disconnected as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_xcb_xim_im_callback),
            "::",
            stringify!(disconnected)
        )
    );
}
pub type xcb_xim_im_callback = _xcb_xim_im_callback;
pub const _xcb_xim_trigger_key_type_t_XCB_XIM_IS_NOT_TRIGGER: _xcb_xim_trigger_key_type_t = 0;
pub const _xcb_xim_trigger_key_type_t_XCB_XIM_TRIGGER_ON_KEY: _xcb_xim_trigger_key_type_t = 1;
pub const _xcb_xim_trigger_key_type_t_XCB_XIM_TRIGGER_OFF_KEY: _xcb_xim_trigger_key_type_t = 2;
pub type _xcb_xim_trigger_key_type_t = u32;
pub use self::_xcb_xim_trigger_key_type_t as xcb_xim_trigger_key_type_t;
pub type xcb_xim_open_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_create_ic_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_get_im_values_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        reply: *mut xcb_im_get_im_values_reply_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_get_ic_values_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        reply: *mut xcb_im_get_ic_values_reply_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_set_ic_values_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_destroy_ic_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_reset_ic_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        reply: *mut xcb_im_reset_ic_reply_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn xcb_xim_create(
        conn: *mut xcb_connection_t,
        screen_id: ::std::os::raw::c_int,
        imname: *const ::std::os::raw::c_char,
    ) -> *mut xcb_xim_t;
}
extern "C" {
    pub fn xcb_xim_destroy(im: *mut xcb_xim_t);
}
extern "C" {
    pub fn xcb_xim_open(
        im: *mut xcb_xim_t,
        callback: xcb_xim_open_callback,
        auto_connect: bool,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_set_im_callback(
        im: *mut xcb_xim_t,
        callbacks: *mut xcb_xim_im_callback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xcb_xim_filter_event(im: *mut xcb_xim_t, event: *mut xcb_generic_event_t) -> bool;
}
extern "C" {
    pub fn xcb_xim_check_trigger_key(
        im: *mut xcb_xim_t,
        keysym: xcb_keysym_t,
        modifier: u32,
        idx: *mut u32,
    ) -> xcb_xim_trigger_key_type_t;
}
extern "C" {
    pub fn xcb_xim_trigger_notify(im: *mut xcb_xim_t, ic: xcb_xic_t, idx: u32, off: bool) -> bool;
}
extern "C" {
    pub fn xcb_xim_get_im_values(
        im: *mut xcb_xim_t,
        callback: xcb_xim_get_im_values_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_create_nested_list(im: *mut xcb_xim_t, ...) -> xcb_xim_nested_list;
}
extern "C" {
    pub fn xcb_xim_create_ic(
        im: *mut xcb_xim_t,
        callback: xcb_xim_create_ic_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_get_ic_values(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_get_ic_values_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_set_ic_values(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_set_ic_values_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_set_ic_focus(im: *mut xcb_xim_t, ic: xcb_xic_t) -> bool;
}
extern "C" {
    pub fn xcb_xim_unset_ic_focus(im: *mut xcb_xim_t, ic: xcb_xic_t) -> bool;
}
extern "C" {
    pub fn xcb_xim_forward_event(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        event: *mut xcb_key_press_event_t,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_reset_ic(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_reset_ic_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_destroy_ic(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_destroy_ic_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_close(im: *mut xcb_xim_t);
}
extern "C" {
    pub fn xcb_xim_support_extension(im: *mut xcb_xim_t, major_code: u16, minor_code: u16) -> bool;
}
extern "C" {
    pub fn xcb_xim_ext_move(im: *mut xcb_xim_t, ic: xcb_xic_t, x: i16, y: i16) -> bool;
}
extern "C" {
    pub fn xcb_compound_text_init();
}
extern "C" {
    pub fn xcb_utf8_to_compound_text(
        utf8: *const ::std::os::raw::c_char,
        length: usize,
        lenghtOut: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xcb_compound_text_to_utf8(
        compound_text: *const ::std::os::raw::c_char,
        length: usize,
        lenghtOut: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
